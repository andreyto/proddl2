//### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
//#
//#   See COPYING file distributed along with the PRODDL package for the
//#   copyright and license terms.
//#
//### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
//
//

//21x21 matrix with the value of
//potential for each residue-residue
//combination. Columns and rows with C indices from 1 to 20
//correspond to residue types in alphabetical 
//order of three letter names. Row 0 and column 0 correspond
//to residues with some unusual type. Their values are set to
//the average of the corresponding row or column. Cell [0,0]
//is set to the average of all [1:20,1:20] cells.
//Generated from Fabian's data (Table 2, Distance Cutoff = 7A).

namespace PRODDL {
namespace Res2Res {
namespace  Fab  {
namespace  A7  {
float a[21][21] = 
{
{  7.0305,	7.67,	6.175,	6.74,	6.515,	8.015,	6.675,	6.425,	7.335,	7.15,	7.25,	7.095,	6.06,	7.205,	6.915,	7.96,	7.265,	7.11,	7.14,	6.65,	7.26 } ,
{  7.67,	6.7,	5.6,	7.7,	7.6,	7.5,	7.3,	7.5,	8.0,	8.6,	8.5,	8.9,	6.2,	8.9,	8.2,	7.7,	8.1,	7.7,	7.1,	6.8,	8.8 } ,
{  6.175,	5.6,	3.9,	5.9,	8.5,	6.2,	6.1,	8.2,	6.9,	6.4,	5.6,	6.2,	3.5,	5.6,	5.2,	7.0,	5.7,	6.2,	8.2,	6.1,	6.5 } ,
{  6.74,	7.7,	5.9,	7.5,	8.8,	5.4,	7.3,	6.6,	7.2,	5.7,	5.9,	5.1,	6.8,	5.1,	6.9,	8.3,	8.6,	7.9,	6.0,	6.7,	5.4 } ,
{  6.515,	7.6,	8.5,	8.8,	4.0,	4.1,	7.3,	4.5,	7.4,	9.2,	6.1,	4.8,	8.4,	4.4,	4.7,	6.2,	9.7,	8.3,	5.6,	4.9,	5.8 } ,
{  8.015,	7.5,	6.2,	5.4,	4.1,	25.2,	6.6,	5.9,	9.4,	9.3,	5.7,	7.6,	4.2,	8.0,	7.6,	8.8,	11.0,	6.4,	7.7,	6.7,	7.0 } ,
{  6.675,	7.3,	6.1,	7.3,	7.3,	6.6,	5.4,	6.0,	7.3,	6.6,	5.9,	7.1,	5.9,	7.1,	7.6,	8.6,	7.3,	6.1,	4.7,	6.1,	7.2 } ,
{  6.425,	7.5,	8.2,	6.6,	4.5,	5.9,	6.0,	4.0,	5.6,	5.8,	5.9,	6.2,	9.0,	7.5,	6.2,	7.1,	8.5,	7.6,	4.1,	5.8,	6.5 } ,
{  7.335,	8.0,	6.9,	7.2,	7.4,	9.4,	7.3,	5.6,	5.8,	8.1,	7.5,	5.9,	7.8,	7.4,	6.4,	7.9,	7.8,	8.2,	8.4,	7.3,	6.4 } ,
{  7.15,	8.6,	6.4,	5.7,	9.2,	9.3,	6.6,	5.8,	8.1,	7.3,	6.0,	7.8,	4.5,	6.5,	7.3,	7.4,	7.0,	5.9,	9.5,	7.8,	6.3 } ,
{  7.25,	8.5,	5.6,	5.9,	6.1,	5.7,	5.9,	5.9,	7.5,	6.0,	8.3,	9.0,	5.2,	7.9,	8.6,	7.6,	6.5,	7.6,	8.8,	7.8,	10.6 } ,
{  7.095,	8.9,	6.2,	5.1,	4.8,	7.6,	7.1,	6.2,	5.9,	7.8,	9.0,	6.8,	5.7,	8.8,	7.6,	7.1,	6.4,	6.8,	8.2,	5.7,	10.2 } ,
{  6.06,	6.2,	3.5,	6.8,	8.4,	4.2,	5.9,	9.0,	7.8,	4.5,	5.2,	5.7,	3.9,	6.4,	4.7,	7.0,	7.1,	6.8,	6.3,	5.7,	6.1 } ,
{  7.205,	8.9,	5.6,	5.1,	4.4,	8.0,	7.1,	7.5,	7.4,	6.5,	7.9,	8.8,	6.4,	9.5,	7.9,	8.5,	6.1,	5.8,	6.6,	8.1,	8.0 } ,
{  6.915,	8.2,	5.2,	6.9,	4.7,	7.6,	7.6,	6.2,	6.4,	7.3,	8.6,	7.6,	4.7,	7.9,	6.3,	8.6,	5.0,	6.9,	6.7,	7.7,	8.2 } ,
{  7.96,	7.7,	7.0,	8.3,	6.2,	8.8,	8.6,	7.1,	7.9,	7.4,	7.6,	7.1,	7.0,	8.5,	8.6,	5.4,	7.9,	8.4,	13.0,	8.7,	8.0 } ,
{  7.265,	8.1,	5.7,	8.6,	9.7,	11.0,	7.3,	8.5,	7.8,	7.0,	6.5,	6.4,	7.1,	6.1,	5.0,	7.9,	6.0,	8.2,	5.8,	6.0,	6.6 } ,
{  7.11,	7.7,	6.2,	7.9,	8.3,	6.4,	6.1,	7.6,	8.2,	5.9,	7.6,	6.8,	6.8,	5.8,	6.9,	8.4,	8.2,	5.9,	7.7,	5.9,	7.9 } ,
{  7.14,	7.1,	8.2,	6.0,	5.6,	7.7,	4.7,	4.1,	8.4,	9.5,	8.8,	8.2,	6.3,	6.6,	6.7,	13.0,	5.8,	7.7,	6.0,	7.4,	5.0 } ,
{  6.65,	6.8,	6.1,	6.7,	4.9,	6.7,	6.1,	5.8,	7.3,	7.8,	7.8,	5.7,	5.7,	8.1,	7.7,	8.7,	6.0,	5.9,	7.4,	5.5,	6.3 } ,
{  7.26,	8.8,	6.5,	5.4,	5.8,	7.0,	7.2,	6.5,	6.4,	6.3,	10.6,	10.2,	6.1,	8.0,	8.2,	8.0,	6.6,	7.9,	5.0,	6.3,	8.4 }
};

const int n = sizeof(a)/sizeof(a[0]);
const float cutoff = 0.7; // nm
} //namespace A7
} //namespace Fab
} //namespace Res2Res
} //namespace PRODDL
