set(PRODDL_BUILD_TOP $ENV{PRODDL_BUILD_TOP} CACHE INTERNAL "")
#set(CMAKE_C_COMPILER=$ENV{CC}  CACHE INTERNAL "")
#set(CMAKE_CXX_COMPILER=$ENV{CXX} CACHE INTERNAL "")
#set(CMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} $ENV{EXTRA_CXXFLAGS}" CACHE INTERNAL "")
add_definitions($ENV{EXTRA_CXXFLAGS})
#set(PYTHON_LIBRARIES=$ENV{PY_LIB_DIR}/$ENV{PY_LIB} CACHE INTERNAL "")
#set(PYTHON_INCLUDE_DIRS=$ENV{PY_INC_DIR} CACHE INTERNAL "")
set(PRODDL_DEPS_BUILD_HOME ${PRODDL_BUILD_TOP}/deps_build CACHE INTERNAL "")
set(PRODDL_DEPS_HOME ${PRODDL_BUILD_TOP}/deps CACHE INTERNAL "")
set(PRODDL_DEPS_HOME_OTHER $ENV{INSTMACH} CACHE INTERNAL "")
set(PRODDL_DEPS_HOME_OTHER2 $ENV{INST} CACHE INTERNAL "")
#set(BOOST_ROOT ${PRODDL_DEPS_HOME_OTHER}  CACHE INTERNAL "")
##It seems that cmake boost build always takes precedence during
##discovery, resulting in old OS version picked. Disable it.
#set(Boost_NO_BOOST_CMAKE ON  CACHE INTERNAL "")
#set(Boost_NO_SYSTEM_PATHS ON CACHE INTERNAL "")
#set(GSL_DIR /usr/local/packages/gsl CACHE INTERNAL "")
#set(CGAL_DIR ${PRODDL_DEPS_HOME}/CGAL-4.1 CACHE INTERNAL "")
#set(FFTW3_DIR ${PRODDL_DEPS_HOME_OTHER} CACHE INTERNAL "")
#set(FFTW_ROOT ${PRODDL_DEPS_HOME_OTHER} CACHE INTERNAL "Helps FindFFTW")
#set(fftw3_LIBRARY ${FFTW3_DIR}/libfftw3-3.lib CACHE INTERNAL "")
#set(fftw3f_LIBRARY ${FFTW3_DIR}/libfftw3f-3.lib CACHE INTERNAL "")
#set(FFTW_LIBRARIES ${fftw3_LIBRARY} ${fftw3f_LIBRARY} CACHE INTERNAL "")
#set(HDF5_DIR ${PRODDL_DEPS_HOME_OTHER} CACHE INTERNAL "")
set(OpenCV_DIR ${PRODDL_DEPS_HOME}/OpenCV2.2 CACHE INTERNAL "")
set(SWIG_DIR ${PRODDL_DEPS_HOME_OTHER} CACHE INTERNAL "")
set(IMP_SWIG_PATH ${SWIG_DIR} CACHE INTERNAL "")
#set(HDF5_ROOT ${HDF5_DIR} CACHE INTERNAL "")
#set(HDF5_LIBRARIES ${PRODDL_DEPS_HOME}/bin/hdf5dll.lib CACHE INTERNAL "")
#IMP uses this
#set(HDF5_C_LIBRARY ${PRODDL_DEPS_HOME_OTHER}/lib/hdf5dll.lib CACHE INTERNAL "")
#current built in FindHDF5 module would define this
#set(HDF5_C_LIBRARIES ${PRODDL_DEPS_HOME_OTHER}/lib/hdf5dll.lib CACHE INTERNAL "")
#set(HDF5_INCLUDE_DIRS ${HDF5_DIR}/include CACHE INTERNAL "")
#set(gsl_LIBRARY ${PRODDL_DEPS_HOME}/bin/libgsl.lib CACHE FILEPATH "")
#set(gslcblas_LIBRARY ${PRODDL_DEPS_HOME}/bin/libgslcblas.lib CACHE FILEPATH "")

set(CMAKE_PREFIX_PATH
	${PRODDL_DEPS_HOME}
    ${PRODDL_DEPS_HOME_OTHER}
    ${PRODDL_DEPS_HOME_OTHER2}
#	${HDF5_DIR} 
#	${HDF5_DIR}/cmake/hdf5 
#	${OpenCV_DIR}
#	${OPENCV_DIR}/build
#	${OPENCV_DIR}/build/x86/vc10
#	${FFTW3_DIR} 
#    ${GSL_DIR}
    CACHE INTERNAL "")
#set(CGAL_DONT_OVERRIDE_CMAKE_FLAGS FALSE CACHE INTERNAL "")
#HDF5/bin dir should be in the PATH to avoid "Fatal error, corrupt file when linking hdf5.dll
#set(ENV{PATH} "$ENV{PATH};${PRODDL_DEPS_HOME}/bin;${SWIG_DIR};${HDF5_DIR}/bin" CACHE INTERNAL "")
#set(ENV{PATH} "$ENV{PATH};${PRODDL_DEPS_HOME}/bin;${SWIG_DIR}" CACHE INTERNAL "")
#set(CMAKE_BUILD_TYPE Release CACHE INTERNAL "Build Type")
#MESSAGE("PATH=$ENV{PATH}")
#MESSAGE("CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
include_directories(${PRODDL_DEPS_HOME}/include ${PRODDL_DEPS_HOME_OTHER}/include ${PRODDL_DEPS_HOME_OTHER2}/include ${PRODDL_DEPS_HOME}/include/opencv ${PRODDL_DEPS_HOME}/include/opencv2)
link_directories(${PRODDL_DEPS_HOME}/lib ${PRODDL_DEPS_HOME_OTHER}/lib ${PRODDL_DEPS_HOME_OTHER}/lib64 ${PRODDL_DEPS_HOME_OTHER2}/lib)
#include(${OpenCV_DIR}/OpenCVConfig.cmake)

set(IMP_DISABLED_MODULES mpi CACHE STRING "A colon-separated list of disabled modules")

#set(CMAKE_INSTALL_PREFIX ${PRODDL_BUILD_TOP}/proddl2_inst CACHE INTERNAL "")
set(CMAKE_VERBOSE_MAKEFILE ON CACHE INTERNAL "")
MESSAGE("Toolchain file loaded")
